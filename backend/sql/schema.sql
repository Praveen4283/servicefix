-- Extensions
CREATE EXTENSION IF NOT EXISTS btree_gist;

-- Organizations table
CREATE TABLE IF NOT EXISTS organizations (
  id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (START WITH 1001 INCREMENT BY 1),
  name VARCHAR(255) NOT NULL,
  domain VARCHAR(255) NOT NULL,
  logo_url VARCHAR(255),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Users table
CREATE TABLE IF NOT EXISTS users (
  id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (START WITH 1001 INCREMENT BY 1),
  email VARCHAR(255) NOT NULL UNIQUE,
  password VARCHAR(255) NOT NULL,
  first_name VARCHAR(100) NOT NULL,
  last_name VARCHAR(100) NOT NULL,
  organization_id BIGINT REFERENCES organizations(id) ON DELETE SET NULL,
  role VARCHAR(50) NOT NULL DEFAULT 'customer', -- admin, agent, customer
  avatar_url TEXT,
  phone VARCHAR(50),
  timezone VARCHAR(100) DEFAULT 'UTC',
  language VARCHAR(10) DEFAULT 'en',
  is_active BOOLEAN DEFAULT TRUE,
  last_login_at TIMESTAMP,
  reset_token VARCHAR(255),
  reset_token_expires_at TIMESTAMP,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  designation VARCHAR(100)
);

-- User tokens table (Using BIGINT for PK, keeping FK as BIGINT)
CREATE TABLE IF NOT EXISTS user_tokens (
  id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (START WITH 1001 INCREMENT BY 1),
  user_id BIGINT NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  refresh_token VARCHAR(255) NOT NULL,
  expires_at TIMESTAMP NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Departments table
CREATE TABLE IF NOT EXISTS departments (
  id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (START WITH 1001 INCREMENT BY 1),
  name VARCHAR(255) NOT NULL,
  description TEXT,
  organization_id BIGINT REFERENCES organizations(id) ON DELETE CASCADE,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  UNIQUE(organization_id, name)
);

-- Department members
CREATE TABLE IF NOT EXISTS department_members (
  id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (START WITH 1001 INCREMENT BY 1),
  department_id BIGINT NOT NULL REFERENCES departments(id) ON DELETE CASCADE,
  user_id BIGINT NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  is_manager BOOLEAN DEFAULT FALSE,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Ticket priorities
CREATE TABLE IF NOT EXISTS ticket_priorities (
  id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (START WITH 1001 INCREMENT BY 1),
  name VARCHAR(255) NOT NULL,
  color VARCHAR(7) NOT NULL,
  sla_hours INTEGER NOT NULL,
  organization_id BIGINT REFERENCES organizations(id) ON DELETE CASCADE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  UNIQUE(organization_id, name)
);

-- Ticket statuses
CREATE TABLE IF NOT EXISTS ticket_statuses (
  id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (START WITH 1001 INCREMENT BY 1),
  organization_id BIGINT NOT NULL REFERENCES organizations(id) ON DELETE CASCADE,
  name VARCHAR(255) NOT NULL,
  color VARCHAR(7) NOT NULL,
  is_default BOOLEAN NOT NULL DEFAULT FALSE,
  is_resolved BOOLEAN NOT NULL DEFAULT FALSE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  UNIQUE(organization_id, name),
  EXCLUDE USING gist (organization_id WITH =) WHERE (is_default)
);

-- Ticket types
CREATE TABLE IF NOT EXISTS ticket_types (
  id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (START WITH 1001 INCREMENT BY 1),
  name VARCHAR(255) NOT NULL,
  description TEXT,
  organization_id BIGINT REFERENCES organizations(id) ON DELETE CASCADE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  UNIQUE(organization_id, name)
);

-- Tags
CREATE TABLE IF NOT EXISTS tags (
  id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (START WITH 1001 INCREMENT BY 1),
  name VARCHAR(100) NOT NULL,
  color VARCHAR(7) NOT NULL,
  organization_id BIGINT REFERENCES organizations(id) ON DELETE CASCADE,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  UNIQUE(organization_id, name)
);

-- Tickets table
CREATE TABLE IF NOT EXISTS tickets (
  id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (START WITH 1001 INCREMENT BY 1),
  subject VARCHAR(255) NOT NULL,
  description TEXT NOT NULL,
  requester_id BIGINT NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  assignee_id BIGINT REFERENCES users(id) ON DELETE SET NULL,
  department_id BIGINT REFERENCES departments(id) ON DELETE SET NULL,
  priority_id BIGINT REFERENCES ticket_priorities(id) ON DELETE SET NULL,
  status_id BIGINT NOT NULL REFERENCES ticket_statuses(id) ON DELETE RESTRICT,
  type_id BIGINT REFERENCES ticket_types(id) ON DELETE SET NULL,
  organization_id BIGINT REFERENCES organizations(id) ON DELETE CASCADE,
  due_date TIMESTAMP,
  sentiment_score DECIMAL(3,2),
  ai_summary TEXT,
  source VARCHAR(50) DEFAULT 'web', -- web, email, chat, phone, etc.
  is_spam BOOLEAN DEFAULT FALSE,
  parent_ticket_id BIGINT REFERENCES tickets(id) ON DELETE SET NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  resolved_at TIMESTAMP,
  closed_at TIMESTAMP
);

-- Ticket tags
CREATE TABLE IF NOT EXISTS ticket_tags (
  id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (START WITH 1001 INCREMENT BY 1),
  ticket_id BIGINT NOT NULL REFERENCES tickets(id) ON DELETE CASCADE,
  tag_id BIGINT NOT NULL REFERENCES tags(id) ON DELETE CASCADE,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  UNIQUE(ticket_id, tag_id)
);

-- Ticket comments
CREATE TABLE IF NOT EXISTS ticket_comments (
  id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (START WITH 1001 INCREMENT BY 1),
  ticket_id BIGINT NOT NULL REFERENCES tickets(id) ON DELETE CASCADE,
  user_id BIGINT NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  content TEXT NOT NULL,
  is_internal BOOLEAN DEFAULT FALSE,
  is_system BOOLEAN DEFAULT FALSE,
  sentiment_score DECIMAL(3,2),
  parent_comment_id BIGINT REFERENCES ticket_comments(id) ON DELETE CASCADE,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Ticket attachments
CREATE TABLE IF NOT EXISTS ticket_attachments (
  id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (START WITH 1001 INCREMENT BY 1),
  ticket_id BIGINT NOT NULL REFERENCES tickets(id) ON DELETE CASCADE,
  comment_id BIGINT REFERENCES ticket_comments(id) ON DELETE CASCADE,
  file_name VARCHAR(255) NOT NULL,
  file_path VARCHAR(255) NOT NULL,
  file_type VARCHAR(100),
  file_size INT,
  uploaded_by BIGINT NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Ticket history/audit log
CREATE TABLE IF NOT EXISTS ticket_history (
  id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (START WITH 1001 INCREMENT BY 1),
  ticket_id BIGINT NOT NULL REFERENCES tickets(id) ON DELETE CASCADE,
  user_id BIGINT REFERENCES users(id) ON DELETE SET NULL,
  field_name VARCHAR(100) NOT NULL,
  old_value TEXT,
  new_value TEXT,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- SLA policies
CREATE TABLE IF NOT EXISTS sla_policies (
  id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (START WITH 1001 INCREMENT BY 1),
  name VARCHAR(255) NOT NULL,
  description TEXT,
  organization_id BIGINT NOT NULL REFERENCES organizations(id) ON DELETE CASCADE,
  first_response_hours INT,
  next_response_hours INT,
  resolution_hours INT,
  business_hours_only BOOLEAN DEFAULT TRUE,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- SLA policy tickets
CREATE TABLE IF NOT EXISTS sla_policy_tickets (
  id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (START WITH 1001 INCREMENT BY 1),
  ticket_id BIGINT NOT NULL REFERENCES tickets(id) ON DELETE CASCADE,
  sla_policy_id BIGINT NOT NULL REFERENCES sla_policies(id) ON DELETE CASCADE,
  first_response_due_at TIMESTAMP,
  next_response_due_at TIMESTAMP,
  resolution_due_at TIMESTAMP,
  first_response_met BOOLEAN,
  next_response_met BOOLEAN,
  resolution_met BOOLEAN,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Automation rules
CREATE TABLE IF NOT EXISTS automation_rules (
  id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (START WITH 1001 INCREMENT BY 1),
  name VARCHAR(255) NOT NULL,
  description TEXT,
  organization_id BIGINT NOT NULL REFERENCES organizations(id) ON DELETE CASCADE,
  conditions JSONB NOT NULL,
  actions JSONB NOT NULL,
  is_active BOOLEAN DEFAULT TRUE,
  execution_order INT DEFAULT 0,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Knowledge base categories
CREATE TABLE IF NOT EXISTS kb_categories (
  id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (START WITH 1001 INCREMENT BY 1),
  name VARCHAR(255) NOT NULL,
  description TEXT,
  slug VARCHAR(255) NOT NULL,
  parent_id BIGINT REFERENCES kb_categories(id) ON DELETE CASCADE,
  icon VARCHAR(50),
  organization_id BIGINT NOT NULL REFERENCES organizations(id) ON DELETE CASCADE,
  is_private BOOLEAN DEFAULT FALSE,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Knowledge base articles
CREATE TABLE IF NOT EXISTS kb_articles (
  id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (START WITH 1001 INCREMENT BY 1),
  title VARCHAR(255) NOT NULL,
  slug VARCHAR(255) NOT NULL,
  content TEXT NOT NULL,
  excerpt TEXT,
  category_id BIGINT REFERENCES kb_categories(id) ON DELETE SET NULL,
  author_id BIGINT NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  organization_id BIGINT NOT NULL REFERENCES organizations(id) ON DELETE CASCADE,
  status VARCHAR(50) DEFAULT 'published', -- draft, published, archived
  is_featured BOOLEAN DEFAULT FALSE,
  view_count INT DEFAULT 0,
  helpful_count INT DEFAULT 0,
  not_helpful_count INT DEFAULT 0,
  ai_summary TEXT,
  ai_search_vector tsvector,
  meta_title VARCHAR(255),
  meta_description TEXT,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  published_at TIMESTAMP
);

-- KB article tags
CREATE TABLE IF NOT EXISTS kb_article_tags (
  id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (START WITH 1001 INCREMENT BY 1),
  article_id BIGINT NOT NULL REFERENCES kb_articles(id) ON DELETE CASCADE,
  tag_id BIGINT NOT NULL REFERENCES tags(id) ON DELETE CASCADE,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  UNIQUE(article_id, tag_id)
);

-- Canned responses
CREATE TABLE IF NOT EXISTS canned_responses (
  id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (START WITH 1001 INCREMENT BY 1),
  title VARCHAR(255) NOT NULL,
  content TEXT NOT NULL,
  user_id BIGINT REFERENCES users(id) ON DELETE CASCADE,
  department_id BIGINT REFERENCES departments(id) ON DELETE CASCADE,
  organization_id BIGINT NOT NULL REFERENCES organizations(id) ON DELETE CASCADE,
  is_shared BOOLEAN DEFAULT FALSE,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Canned response tags
CREATE TABLE IF NOT EXISTS canned_response_tags (
  id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (START WITH 1001 INCREMENT BY 1),
  canned_response_id BIGINT NOT NULL REFERENCES canned_responses(id) ON DELETE CASCADE,
  tag_id BIGINT NOT NULL REFERENCES tags(id) ON DELETE CASCADE,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  UNIQUE(canned_response_id, tag_id)
);

-- Customer satisfaction survey
CREATE TABLE IF NOT EXISTS satisfaction_surveys (
  id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (START WITH 1001 INCREMENT BY 1),
  ticket_id BIGINT NOT NULL REFERENCES tickets(id) ON DELETE CASCADE,
  user_id BIGINT NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  rating INT NOT NULL, -- 1-5
  feedback TEXT,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Reports
CREATE TABLE IF NOT EXISTS saved_reports (
  id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (START WITH 1001 INCREMENT BY 1),
  name VARCHAR(255) NOT NULL,
  description TEXT,
  report_type VARCHAR(100) NOT NULL,
  parameters JSONB NOT NULL,
  user_id BIGINT NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  organization_id BIGINT NOT NULL REFERENCES organizations(id) ON DELETE CASCADE,
  is_shared BOOLEAN DEFAULT FALSE,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Notifications
CREATE TABLE IF NOT EXISTS notifications (
  id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (START WITH 1001 INCREMENT BY 1),
  user_id BIGINT NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  title VARCHAR(255) NOT NULL,
  message TEXT NOT NULL,
  link VARCHAR(255),
  is_read BOOLEAN DEFAULT FALSE,
  type VARCHAR(50) NOT NULL, -- ticket_assigned, ticket_updated, mention, etc.
  metadata JSONB,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- User notification preferences
CREATE TABLE IF NOT EXISTS notification_preferences (
  id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (START WITH 1001 INCREMENT BY 1),
  user_id BIGINT NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  event_type VARCHAR(50) NOT NULL, -- ticket_assigned, ticket_updated, mention, etc.
  email_enabled BOOLEAN DEFAULT TRUE,
  push_enabled BOOLEAN DEFAULT TRUE,
  in_app_enabled BOOLEAN DEFAULT TRUE,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  UNIQUE(user_id, event_type)
);

-- Chatbot conversations
CREATE TABLE IF NOT EXISTS chatbot_conversations (
  id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (START WITH 1001 INCREMENT BY 1),
  user_id BIGINT REFERENCES users(id) ON DELETE SET NULL,
  visitor_id VARCHAR(255),
  organization_id BIGINT NOT NULL REFERENCES organizations(id) ON DELETE CASCADE,
  status VARCHAR(50) DEFAULT 'active', -- active, transferred, ended
  metadata JSONB,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  ended_at TIMESTAMP
);

-- Chatbot messages
CREATE TABLE IF NOT EXISTS chatbot_messages (
  id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (START WITH 1001 INCREMENT BY 1),
  conversation_id BIGINT NOT NULL REFERENCES chatbot_conversations(id) ON DELETE CASCADE,
  sender_type VARCHAR(50) NOT NULL, -- user, bot, agent
  sender_id BIGINT REFERENCES users(id) ON DELETE SET NULL,
  content TEXT NOT NULL,
  metadata JSONB,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- AI training data
CREATE TABLE IF NOT EXISTS ai_training_data (
  id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (START WITH 1001 INCREMENT BY 1),
  organization_id BIGINT NOT NULL REFERENCES organizations(id) ON DELETE CASCADE,
  data_type VARCHAR(50) NOT NULL, -- sentiment, classification, entity, etc.
  input_text TEXT NOT NULL,
  output_labels JSONB NOT NULL,
  is_verified BOOLEAN DEFAULT FALSE,
  verified_by BIGINT REFERENCES users(id) ON DELETE SET NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Scheduled maintenance
CREATE TABLE IF NOT EXISTS scheduled_maintenance (
  id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (START WITH 1001 INCREMENT BY 1),
  title VARCHAR(255) NOT NULL,
  description TEXT NOT NULL,
  start_time TIMESTAMP NOT NULL,
  end_time TIMESTAMP NOT NULL,
  organization_id BIGINT NOT NULL REFERENCES organizations(id) ON DELETE CASCADE,
  created_by BIGINT NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  status VARCHAR(50) DEFAULT 'scheduled', -- scheduled, in_progress, completed, cancelled
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Add indexes for performance
CREATE INDEX IF NOT EXISTS idx_tickets_requester_id ON tickets(requester_id);
CREATE INDEX IF NOT EXISTS idx_tickets_assignee_id ON tickets(assignee_id);
CREATE INDEX IF NOT EXISTS idx_tickets_status_id ON tickets(status_id);
CREATE INDEX IF NOT EXISTS idx_tickets_organization_id ON tickets(organization_id);
CREATE INDEX IF NOT EXISTS idx_users_organization_id ON users(organization_id);
CREATE INDEX IF NOT EXISTS idx_user_tokens_user_id ON user_tokens(user_id);
CREATE INDEX IF NOT EXISTS idx_ticket_comments_ticket_id ON ticket_comments(ticket_id);
CREATE INDEX IF NOT EXISTS idx_kb_articles_category_id ON kb_articles(category_id);
CREATE INDEX IF NOT EXISTS idx_kb_articles_organization_id ON kb_articles(organization_id);
CREATE INDEX IF NOT EXISTS idx_notifications_user_id ON notifications(user_id);
CREATE INDEX IF NOT EXISTS idx_notifications_is_read ON notifications(is_read);
CREATE INDEX IF NOT EXISTS idx_chatbot_messages_conversation_id ON chatbot_messages(conversation_id); -- Added index
CREATE INDEX IF NOT EXISTS idx_chatbot_conversations_user_id ON chatbot_conversations(user_id); -- Added index

-- Add text search index for knowledge base
CREATE INDEX IF NOT EXISTS idx_kb_articles_search ON kb_articles USING GIN(ai_search_vector);

-- Triggers for updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = CURRENT_TIMESTAMP;
  RETURN NEW;
END;
$$ language 'plpgsql';

-- Apply trigger function to all relevant tables (ensure all tables needing auto-update are listed)
DO $$ 
DECLARE 
  tbl_name text;
BEGIN
  FOR tbl_name IN 
    SELECT table_name 
    FROM information_schema.columns 
    WHERE table_schema = 'public' -- Or your specific schema
      AND column_name = 'updated_at'
      AND table_name NOT IN (
        -- List tables that should NOT have the trigger, if any
        'some_table_without_auto_update'
      )
  LOOP
    EXECUTE format('CREATE TRIGGER update_%1$s_modtime BEFORE UPDATE ON %1$s FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();', tbl_name);
  END LOOP;
END $$;

-- Function to add default settings (departments, statuses, priorities, types) for a new organization
CREATE OR REPLACE FUNCTION add_organization_defaults() -- Renamed function
RETURNS TRIGGER AS $$
DECLARE
  -- Default Departments
  default_departments text[][] := '{{"IT Support", "Handles technical issues and hardware/software support."},
                                {"Customer Service", "Handles customer inquiries and general support."},
                                {"Sales", "Handles sales-related inquiries."},
                                {"Billing", "Handles billing questions and issues."},
                                {"Human Resources", "Handles internal HR matters."}}';
  -- Default Ticket Statuses (Matches initialize_database.js)
  default_statuses text[][] := '{{"Open", "#1E88E5", "TRUE", "FALSE"},
                                {"In Progress", "#7B1FA2", "FALSE", "FALSE"},
                                {"Pending", "#FFC107", "FALSE", "FALSE"},
                                {"Resolved", "#43A047", "FALSE", "TRUE"},
                                {"Closed", "#757575", "FALSE", "TRUE"}}';
  -- Default Ticket Priorities (Matches initialize_database.js)
  default_priorities text[][] := '{{"Low", "#1E88E5", "48"},
                                 {"Medium", "#FFC107", "24"},
                                 {"High", "#FF5722", "8"},
                                 {"Urgent", "#D32F2F", "4"}}';
  -- Default Ticket Types (Matches initialize_database.js)
  default_types text[][] :=      '{{"Question", "General questions about using the service"},
                                {"Incident", "Service disruption or error"},
                                {"Problem", "Underlying issue causing one or more incidents"},
                                {"Feature Request", "Request for new functionality"},
                                {"Bug", "Report of system not working as expected"}}';
  -- Default Tags (from CreateTicketPage.tsx)
  default_tags text[] := '{hardware,software,network,email,printer,security,access,mobile,desktop,authentication,vpn,database,application,server,microsoft365,windows,mac,linux,password,wifi}';
  item text[];
  tag_name text;
  default_tag_color text := '#808080'; -- Default color for tags
BEGIN
  -- Insert Departments
  FOREACH item SLICE 1 IN ARRAY default_departments
  LOOP
    INSERT INTO departments (organization_id, name, description)
    VALUES (NEW.id, item[1], item[2])
    ON CONFLICT (organization_id, name) DO NOTHING;
  END LOOP;
  
  -- Insert Ticket Statuses (with explicit check)
  FOREACH item SLICE 1 IN ARRAY default_statuses
  LOOP
    -- Check if a status with this name already exists for this org
    IF NOT EXISTS (SELECT 1 FROM ticket_statuses 
                   WHERE organization_id = NEW.id AND name = item[1])
    THEN
        -- Insert with is_default always FALSE; will be set manually for default org
        INSERT INTO ticket_statuses (organization_id, name, color, is_default, is_resolved)
        VALUES (NEW.id, item[1], item[2], FALSE, item[4]::boolean);
    END IF;
  END LOOP;

  -- Insert Ticket Priorities
  FOREACH item SLICE 1 IN ARRAY default_priorities
  LOOP
    INSERT INTO ticket_priorities (organization_id, name, color, sla_hours)
    VALUES (NEW.id, item[1], item[2], item[3]::integer)
    ON CONFLICT (organization_id, name) DO NOTHING;
  END LOOP;

  -- Insert Ticket Types
  FOREACH item SLICE 1 IN ARRAY default_types
  LOOP
    INSERT INTO ticket_types (organization_id, name, description)
    VALUES (NEW.id, item[1], item[2])
    ON CONFLICT (organization_id, name) DO NOTHING;
  END LOOP;

  -- Insert Tags
  FOREACH tag_name IN ARRAY default_tags
  LOOP
    INSERT INTO tags (organization_id, name, color)
    VALUES (NEW.id, tag_name, default_tag_color)
    ON CONFLICT (organization_id, name) DO NOTHING; -- Assuming UNIQUE constraint on (organization_id, name)
  END LOOP;

  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger to call the function after an organization is inserted
DROP TRIGGER IF EXISTS trg_add_default_departments ON organizations; -- Drop old trigger first
CREATE TRIGGER trg_add_organization_defaults -- Renamed trigger
AFTER INSERT ON organizations
FOR EACH ROW
EXECUTE FUNCTION add_organization_defaults(); -- Call renamed function